name: Release - Upload Win/Linux to Draft

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Tag to build and upload to (e.g., v1.2.3)
        required: true

permissions:
  contents: write

jobs:
  upload_assets:
    name: Build and upload Windows/Linux assets to draft release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: windows-latest
            platform: win32

    steps:
      - name: Checkout at tag
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # No icon prep needed; linux.icon points to build/favicon.png committed in repo

      - name: Package Linux artifacts
        if: runner.os == 'Linux'
        env:
          ELECTRON_BUILDER_DISABLE_PUBLISH: true
        run: |
          cd packages/desktop
          npx electron-builder --linux AppImage --publish=never

      - name: Package Windows artifacts
        if: runner.os == 'Windows'
        shell: pwsh
        env:
          ELECTRON_BUILDER_DISABLE_PUBLISH: true
        run: |
          cd packages/desktop
          npx electron-builder --win nsis --publish=never

      - name: Ensure draft release exists
        if: runner.os == 'Linux'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ inputs.tag }}"
          if gh release view "$TAG_NAME" >/dev/null 2>&1; then
            echo "Release $TAG_NAME exists; keeping draft=true"
            gh release edit "$TAG_NAME" --draft=true --prerelease=false --verify-tag
          else
            echo "Draft release $TAG_NAME does not exist; creating"
            gh release create "$TAG_NAME" --draft --verify-tag --generate-notes
          fi

      - name: Upload Linux artifacts to draft release
        if: runner.os == 'Linux'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          TAG_NAME="${{ inputs.tag }}"
          ASSET_GLOBS="packages/desktop/dist/*.AppImage packages/desktop/dist/*.deb packages/desktop/dist/*.rpm packages/desktop/dist/*latest*.yml packages/desktop/dist/*-linux*.yml"
          shopt -s nullglob
          FILES=()
          for g in $ASSET_GLOBS; do
            for f in $g; do FILES+=("$f"); done
          done
          if [ ${#FILES[@]} -eq 0 ]; then
            echo "No Linux artifacts to upload" >&2
            exit 0
          fi
          echo "Ensuring no conflicting Linux assets on $TAG_NAME"
          # Get release info including ID
          release_info=$(gh release view "$TAG_NAME" --json id,assets)
          release_id=$(echo "$release_info" | jq -r '.id')
          assets_json=$(echo "$release_info" | jq -r '.assets')
          
          for f in "${FILES[@]}"; do
            name=$(basename "$f")
            id=$(echo "$assets_json" | jq -r --arg n "$name" '.assets[] | select(.name==$n) | .id')
            if [ -n "$id" ] && [ "$id" != "null" ]; then
              echo "Deleting existing asset by id: $id ($name)"
              gh api -X DELETE "repos/$GITHUB_REPOSITORY/releases/assets/$id" >/dev/null 2>&1 || true
            fi
          done
          # Also delete any existing latest-linux.yml files that might conflict
          latest_id=$(echo "$assets_json" | jq -r '.assets[] | select(.name | contains("latest-linux.yml")) | .id')
          if [ -n "$latest_id" ] && [ "$latest_id" != "null" ]; then
            echo "Deleting existing latest-linux.yml asset by id: $latest_id"
            gh api -X DELETE "repos/$GITHUB_REPOSITORY/releases/assets/$latest_id" >/dev/null 2>&1 || true
          fi
          echo "Uploading ${#FILES[@]} Linux artifacts to $TAG_NAME"
          gh release upload "$TAG_NAME" "${FILES[@]}" --clobber

      - name: Upload Windows artifacts to draft release
        if: runner.os == 'Windows'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $tagName = '${{ inputs.tag }}'
          $patterns = @(
            'packages/desktop/dist/*.exe',
            'packages/desktop/dist/*.msi',
            'packages/desktop/dist/*latest*.yml',
            'packages/desktop/dist/*-win*.yml'
          )
          $files = @()
          foreach ($p in $patterns) { $files += Get-ChildItem -Path $p -ErrorAction SilentlyContinue | Select-Object -Expand FullName }
          if ($files.Count -eq 0) {
            Write-Host 'No Windows artifacts to upload'
            exit 0
          }
          Write-Host "Ensuring no conflicting Windows assets on $tagName"
          $assetsJson = gh release view $tagName --json assets | Out-String
          foreach ($f in $files) {
            $name = [System.IO.Path]::GetFileName($f)
            $id = echo $assetsJson | jq -r ".assets[] | select(.name==\"$name\") | .id"
            if ($id -and $id -ne 'null' -and $id -ne '') {
              Write-Host "Deleting existing asset by id: $id ($name)"
              gh api "repos/$env:GITHUB_REPOSITORY/releases/assets/$id" -X DELETE | Out-Null
            }
          }
          Write-Host ("Uploading {0} Windows artifacts to {1}" -f $files.Count, $tagName)
          gh release upload $tagName $files --clobber

