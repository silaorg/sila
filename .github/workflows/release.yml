name: Build and Release

# Triggers: Push to version tags (v1.0.0, v2.1.3, etc.) or manual dispatch
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ${{ matrix.os }}
    
    # Matrix strategy: Build for multiple platforms simultaneously
    strategy:
      fail-fast: false  # Don't stop other builds if one fails
      matrix:
        include:
          # macOS builds (both Intel and Apple Silicon) with code signing
          - os: macos-latest
            platform: "darwin"
            arch: "x64"
            signing: true
          - os: macos-latest
            platform: "darwin"
            arch: "arm64"
            signing: true
          # Linux build (no signing required)
          - os: ubuntu-latest
            platform: "linux"
            arch: "x64"
            signing: false
          # Windows build (no signing required)
          - os: windows-latest
            platform: "win32"
            arch: "x64"
            signing: false
    
    steps:
      # Step 1: Get the source code
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'  # Cache dependencies for faster builds
          
      # Step 3: Install all dependencies (workspace-aware)
      - name: Install dependencies
        run: npm ci
        
      # Step 4: Setup code signing for macOS builds only
      - name: Setup code signing (macOS)
        if: matrix.signing
        run: |
          # Create a temporary keychain for this build
          security create-keychain -p "" build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings build.keychain
          
          # Import the certificate from GitHub secrets
          echo "${{ secrets.MACOS_CERTIFICATE_P12 }}" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${{ secrets.MACOS_CERTIFICATE_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
          
          # Clean up sensitive files
          rm certificate.p12
          
      # Step 5: Build and publish the Electron app
      - name: Build and publish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # For GitHub API access
          CSC_LINK: ${{ secrets.MACOS_CERTIFICATE_P12 }}  # Code signing certificate
          CSC_KEY_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}  # Certificate password
          APPLE_ID: ${{ secrets.APPLE_ID }}  # Apple Developer account
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASSWORD }}  # For notarization
        run: |
          cd packages/desktop
          npm run build:publish  # Builds and publishes to GitHub releases
          
      # Step 6: Upload build artifacts for manual download
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build  # e.g., darwin-x64-build
          path: packages/desktop/dist/  # Where electron-builder outputs files
          retention-days: 30  # Keep artifacts for 30 days
          
      # Step 7: Create GitHub release with all platform builds
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')  # Only on tag pushes
        uses: softprops/action-gh-release@v1
        with:
          files: |
            packages/desktop/dist/*.dmg    # macOS installers
            packages/desktop/dist/*.exe    # Windows installers
            packages/desktop/dist/*.AppImage  # Linux AppImages
            packages/desktop/dist/*.deb    # Linux Debian packages
            packages/desktop/dist/*.rpm    # Linux RPM packages
          draft: false  # Publish immediately (not draft)
          prerelease: false  # Not a pre-release
          generate_release_notes: true  # Auto-generate from commits
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 